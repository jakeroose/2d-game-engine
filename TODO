valgrind --leak-check=full ./run

look into blitting light polygon shape onto an image to render on GPU
- same with UI elements, seems like sdl primitive draw funcs are super slow
- CUDA example from class
https://stackoverflow.com/questions/20070155/how-to-set-a-pixel-in-a-sdl-surface

Final Reqs:
music
sound
ending sprite
don't forget to display name for video

Polish:
more ballanced jumping
have lights follow player via some slerp function (flocking?)
lights don't clip through walls
cancel explosion method

HUD:
render order
interactable menu 

Lighting:
Experiment - whats more expensive: calcing if point is w/in radius of circle -or-
  hashing 2 intersecting points on x axis of the circle, looking it up & adding
  offset
Have light intensity pulse with the sprite 

Sprites:
fading sprites doesn't seem to have much affect on FPS. could add check to see if far
  enough away to update, but not sure if updateTexture is that expensive.
add fade to collectable. probably just make it function of Drawable.
maybe add to bg sprites as well

LevelManager:
add/remove enemies and collectables

=== End of "Need to Do" ===
Things to consider:
potentially a way to combine lightPolygons so that there is only one pass over
  the x coordinates of the viewport. it is definitely the looping over screen pixels
  that is causing the lag, not just the draw function
if adding slerp functionality to movement then that will help prevent falling through
  walls durring heavy lag (i.e. valgrind)
player inherit from SmartSprite or other way around
each enemy, collectable, light may need it's own list of walls to compute from?
potentially remove vertices shared by 2 walls. May have to create some massive polygon
  for all connected walls though.
Walls have width (turns out, super easy just need to update collision det.)
multiple hudManagers, each level specific with one master manager for pause menu.
  Split them up into screen and world dependent menus
  - or - could put menus into strings/*levelname*/*menuname* and then load the menus
  specific to each level to reduce loops and checks for menus that will never load
  outside of a specific level

Bugs:
jumping/flying depends on frame rate
border walls not added to free walls

Words for title:
vitality - capacity for survival or for the continuation of a meaningful or purposeful existence
labyrinth

multiplayer idea:
players can battle, if they hit each other they both lose energy?
