valgrind --leak-check=full ./run

practice iterator while loops
look into blitting light polygon shape onto an image to render on GPU
- same with UI elements, seems like sdl primitive draw funcs are super slow
https://stackoverflow.com/questions/20070155/how-to-set-a-pixel-in-a-sdl-surface

Background:
do something with background image

Collectable:

Enemies:
should fall if able, or don't go off an edge
on death should... implode? O.o

Player:

LevelManager:
Reset level
More robust so we can differentiate player, collectable and enemy spawn coords

Polish:
plug all of the leaks
more ballanced jumping 
Scoring / Ending
lights don't clip through walls
don't stop camera from following along edges of the map
Walls have width?
Music
Sound
have lights follow player via some slerp function (flocking?)
slowly regain energy

=== End of "Need to Do" ===

Things to consider:
object pooling for walls (when levels get larger)
potentially a way to combine lightPolygons so that there is only one pass over
  the x coordinates of the viewport
tiling background so that it doesn't glitch to hell for tall maps
if adding slerp functionality to movement then that will help prevent falling through
  walls durring heavy lag (i.e. valgrind)

Lighting:
More autonomous
- if a light moves then it should automatically update itself. it shouldn't have to be told to update its position and also told to update its polygon.
- maybe some sort of update queue in light renderer that will notify lights to update themselves.

Bugs:
crashed when hit the ceiling too hard
player can fall through floors at a certain velocity
jumping/flying depends on frame rate
memory leak with collectables in levelManager
