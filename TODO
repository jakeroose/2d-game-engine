valgrind --leak-check=full ./run

practice iterator while loops

Collectable:

Enemies:

Player:

LevelManager:
Reset level
More robust so we can differentiate player, collectable and enemy spawn coords

Low Prio:
jumping - in no way is it balanced
better XML
Cool background. I think falling, rotating squares w/ parallax layers.
Scoring / Ending

Polish:
lights don't clip through walls
Walls have width?
Music
Sound
Player sprite
enemy sprite
collectable sprite
have lights follow player via some slerp function


=== End of "Need to Do" ===

Things to consider:
object pooling for walls (when levels get larger)
potentially a way to combine lightPolygons so that there is only one pass over 
  the x coordinates of the viewport
tiling background so that it doesn't glitch to hell for tall maps
slowly regain energy

Lighting:
More autonomous
- if a light moves then it should automatically update itself. it shouldn't have to be told to update its position and also told to update its polygon. 
- maybe some sort of update queue in light renderer that will notify lights to update themselves.

Bugs:
crashed when hit the ceiling too hard
player can fall through floors at a certain velocity
jumping/flying depends on frame rate
memory leak with collectables in levelManager
